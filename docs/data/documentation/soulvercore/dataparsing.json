{"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"SoulverCore gives you human-friendly, type-safe & performant data parsing from Swift strings."}]},{"type":"paragraph","inlineContent":[{"text":"Specify types you want to parse from a string. If they are present, you get back ready-to-use data primitives (not strings!).","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This approach to data parsing allows you to ignore:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The specifics of how the data you need is formatted in text","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Random words (or other data points), surrounding the data you need"}]}]}],"type":"orderedList"},{"type":"heading","text":"Examples","anchor":"Examples","level":2},{"type":"paragraph","inlineContent":[{"text":"Let’s look at a few examples:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let (testCount, failureCount, timeTaken) = \"Executed 4 tests, with 1 failure in 0.009 seconds\".find(.number, .number, .time)!","","testCount \/\/ 4","failureCount \/\/ 1","timeTaken \/\/ 0.009 seconds","","let (date, temperature, humidity) = \"On August 23, 2022 the temperature in Chicago was 68.3 ºF (with a humidity of 74%)\".find(.date, .temperature, .percentage)!","","date \/\/ August 23, 2022","temperature \/\/ 68.3 ºF","humidity \/\/ 74%","","let (earnings, fileSize, url) = \"Total Earnings From PDF: $12.2k (3.25 MB, at https:\/\/lifeadvice.co.uk\/pdfs\/download?id=guide)\".find(.currency, .fileSize, .url)!","","earnings \/\/ 12,200 USD","fileSize \/\/ 3.25 MB","url \/\/ https:\/\/lifeadvice.co.uk\/pdfs\/download?id=guide"]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Note"}]},{"type":"text","text":": the returned data points are "},{"type":"strong","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" strings. They are native Swift data types (available as elements on a tuple), on which you can immediately perform operations:"}]},{"type":"codeListing","syntax":"swift","code":["let numbers = \"100 + 20\".find(.number, .number)!","let sum = numbers.0 + numbers.1 \/\/ 120"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Up to 6 data points can be requested in a single call. Variadic generics are planned for Swift 6, so we’ll support more in the future."}]},{"anchor":"The-beauty-of-high-order-data-extraction","level":2,"type":"heading","text":"The beauty of high order data extraction"},{"inlineContent":[{"type":"text","text":"Observe the beauty of the higher order concepts used here: numbers come in many formats (1,000, 30k, .456), yet a simple “.number” query “matches” them all. And .date “matches” dates in  commonly used date formats."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For cases where the locale plays a role in the format of data, you may specify a locale in the find method (otherwise the current system Locale is used):"}],"type":"paragraph"},{"code":["let europeanNumber = \"€1.333,24\".find(.currency, locale: Locale(identifier: \"en_DE\"))","let americanDate = \"05\/30\/21\".find(.date, locale: Locale(identifier: \"en_US\")) \/\/ month\/day\/year"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Where possible, standard Swift primitives are returned (URL, Date, Decimal, etc). In cases where no Swift primitive wholly captures the data present in the string, a SoulverCore value type is returned with properties containing the relevant data."}],"type":"paragraph"},{"anchor":"Supported-data-types","level":2,"type":"heading","text":"Supported data types"},{"rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Symbol"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Match Examples"}]}],[{"type":"paragraph","inlineContent":[{"text":"Return Type","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":".number"}]}],[{"type":"paragraph","inlineContent":[{"text":"123.45, 10k, -.3, 3,000, 50_000","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Decimal","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":".binaryNumber"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"0b1011010"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"UInt"}]}]],[[{"type":"paragraph","inlineContent":[{"text":".hexNumber","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"0x31FE28","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"UInt"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":".boolean"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"‘true’ or ‘false’"}]}],[{"type":"paragraph","inlineContent":[{"text":"Bool","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":".percentage","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"10%, 230.99%"}]}],[{"type":"paragraph","inlineContent":[{"text":"Decimal","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":".date"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"March 12, 2004, 21\/04\/77, July the 4th, etc"}]}],[{"type":"paragraph","inlineContent":[{"text":"Date","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":".unixTimestamp"}]}],[{"type":"paragraph","inlineContent":[{"text":"1661259854","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"TimeInterval","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":".place"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Paris, Tokyo, Bali, Israel"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"SoulverCore.Place"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":".airport"}]}],[{"type":"paragraph","inlineContent":[{"text":"SFO, LAX, SYD","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"SoulverCore.Place"}]}]],[[{"type":"paragraph","inlineContent":[{"text":".timezone","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"AEST, GMT, EST"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"SoulverCore.Place"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":".currencyCode"}]}],[{"type":"paragraph","inlineContent":[{"text":"USD, EUR, DOGE","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"String","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":".currency","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"$10.00, AU$30k, 350 JPY"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"SoulverCore.UnitExpression"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":".time"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"10 s, 3 min, 4 weeks"}]}],[{"type":"paragraph","inlineContent":[{"text":"SoulverCore.UnitExpression","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":".distance"}]}],[{"type":"paragraph","inlineContent":[{"text":"10 km, 3 miles, 4 cm","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"SoulverCore.UnitExpression"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":".temperature"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"25 °C, 77 °F, 10C, 5 F"}]}],[{"type":"paragraph","inlineContent":[{"text":"SoulverCore.UnitExpression","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":".weight"}]}],[{"type":"paragraph","inlineContent":[{"text":"10kg, 45 lb","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"SoulverCore.UnitExpression","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":".area"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"30 m2, 40 in2"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"SoulverCore.UnitExpression"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":".speed"}]}],[{"type":"paragraph","inlineContent":[{"text":"30 mph","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"SoulverCore.UnitExpression"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":".volume"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"3 litres, 4 cups, 10 fl oz"}]}],[{"type":"paragraph","inlineContent":[{"text":"SoulverCore.UnitExpression","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":".timespan"}]}],[{"type":"paragraph","inlineContent":[{"text":"3 hours 12 minutes","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"SoulverCore.Timespan"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":".laptime"}]}],[{"type":"paragraph","inlineContent":[{"text":"01:30:22.490 (hh:mm:ss.ms)","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"SoulverCore.Laptime","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":".timecode","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"03:10:21:16 (hh:mm:ss:frames)"}]}],[{"type":"paragraph","inlineContent":[{"text":"SoulverCore.Frametime","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":".pitch"}]}],[{"type":"paragraph","inlineContent":[{"text":"A4, Bb7, C#9","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"SoulverCore.Pitch"}]}]],[[{"type":"paragraph","inlineContent":[{"text":".url","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"https:\/\/soulver.app","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"URL"}]}]],[[{"type":"paragraph","inlineContent":[{"text":".emailAddress","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"bob@hotmail.com"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"String"}]}]],[[{"type":"paragraph","inlineContent":[{"text":".hashTag","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"#this_is_a_tag","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"String","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":".whitespace"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"All whitespace characters (including tabs) are collapsed into a single whitespace token"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"String"}]}]]],"header":"row","type":"table","alignments":["left","left","left"]},{"anchor":"Finding-data-in-strings","level":2,"type":"heading","text":"Finding data in strings"},{"inlineContent":[{"text":"As we saw above, finding a data point in a string is as simple as asking for it:","type":"text"}],"type":"paragraph"},{"code":["let percent = \"Results of likeness test: 83% match\".find(.percentage)","\/\/ percent is the decimal 0.83"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Extracting multiple data points is no harder. A tuple is returned with the correct number of arguments and data types:","type":"text"}],"type":"paragraph"},{"code":["let payrollEntry = \"CREDIT\t\t\t03\/02\/2022\t\t\tPayroll from employer\t\t\t\t$200.23\" \/\/ this string has inconsistent whitespace between entities, but this isn't a problem for us","let (date, currency) = payrollEntry.find(.date, .currency)!","date \/\/ Either February 3, or March 2, depending on your system locale","currency \/\/ UnitExpression object (use .value to get the decimalValue, and .unit.identifier to get the currency code - USD)"],"type":"codeListing","syntax":"swift"},{"anchor":"Extracting-a-data-point-from-an-array-of-strings","level":2,"type":"heading","text":"Extracting a data point from an array of strings"},{"inlineContent":[{"type":"text","text":"We can also call find with a single data type on an array of strings, and get back an array of the corresponding data type of the match:"}],"type":"paragraph"},{"code":["let amounts = [\"Zac spent $50\", \"Molly spent US$81.9 (with her 10% discount)\", \"Jude spent $43.90 USD\"].find(.currency)","","let totalAmount = amounts.reduce(0.0) {","    $0 + $1.value","}","","\/\/ totalAmount is $175.80"],"type":"codeListing","syntax":"swift"},{"anchor":"Transforming-data-in-strings","level":2,"type":"heading","text":"Transforming data in strings"},{"inlineContent":[{"type":"text","text":"Imagine we wanted to standardize the whitespace in the string from the previous example:"}],"type":"paragraph"},{"code":["let standardized = \"CREDIT\t\t\t03\/02\/2022\t\t\tPayroll from employer\t\t\t\t$200.23\".replacingAll(.whitespace) { whitespace in","    return \" \"","}","","\/\/ standardized is \"CREDIT 03\/02\/2022 Payroll from employer $200.23\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Or perhaps you want to convert European formatted numbers into Swift “standard” ones:"}],"type":"paragraph"},{"code":["let standardized = \"10.330,99 8.330,22 330,99\".replacingAll(.number, locale: Locale(identifier: \"en_DE\")) { number in","    return NumberFormatter.localizedString(from: number as NSNumber, number: .decimal)","}","","\/\/ standardized is \"10,330.99 8,330.22 330.99\")"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Or perhaps you want to convert Celsius temperatures into Fahrenheit:"}],"type":"paragraph"},{"code":["let convertedTemperatures = [\"25 °C\", \"12.5 degrees celsius\", \"-22.6 C\"].replacingAll(.temperature) { celsius in","    ","    let measurementC: Measurement<UnitTemperature> = Measurement(value: celsius.value.doubleValue, unit: .celsius)","    let measurementF = measurementC.converted(to: .fahrenheit)","    ","    let formatter = MeasurementFormatter()","    formatter.unitOptions = .providedUnit","    return formatter.string(from: measurementF)","    ","}","","\/\/ convertedTemperatures is [\"77°F\", \"54.5°F\", \"-8.68°F\"]"],"type":"codeListing","syntax":"swift"},{"anchor":"Extending-SoulverCore-with-your-own-custom-types","level":2,"type":"heading","text":"Extending SoulverCore with your own custom types"},{"inlineContent":[{"type":"text","text":"Let’s imagine we had strings with the following format, describing some containers:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"“Color: blue, size: medium, volume: 12.5 cm3”","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"“Color: red, size: small, volume: 6.2 cm3”","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"“Color: yellow, size: large, volume: 17.82 cm3”","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"We want to extract this data into a custom Swift type that represents a Container."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Define our model classes (if they don’t exist already)","type":"text"}]}]}],"type":"orderedList"},{"code":["enum Color: String, RawRepresentable {","\tcase blue","\tcase red","\tcase yellow","}","","enum Size: String, RawRepresentable {","\tcase small","\tcase medium","\tcase large","}","","struct Container {","   let color: Color","   let size: Size","   let volume: Decimal","","   init(_ data: (Color, Size, UnitExpression)) {","        self.color = data.0","        self.size = data.1","        self.volume = data.2.value","    }","}"],"type":"codeListing","syntax":"swift"},{"start":2,"items":[{"content":[{"inlineContent":[{"type":"text","text":"Then create parsers for Color and Size, and add them static variables on DataPoint"}],"type":"paragraph"}]}],"type":"orderedList"},{"code":["struct ColorParser: DataFromTokenParser {","    typealias DataType = Color","    ","    func parseDataFrom(token: SoulverCore.Token) -> Color? {","        return Color(rawValue: token.stringValue.lowercased())","    }","}","","struct SizeParser: DataFromTokenParser {","    typealias DataType = Size","","    func parseDataFrom(token: SoulverCore.Token) -> Size? {","        return Size(rawValue: token.stringValue.lowercased())","    }","}","","extension DataPoint {","    static var color: DataPoint<ColorParser> {","        return DataPoint<ColorParser>(parser: ColorParser())","    }","","    static var size: DataPoint<SizeParser> {","        return DataPoint<SizeParser>(parser: SizeParser())","    }","}"],"type":"codeListing","syntax":"swift"},{"start":3,"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"That’s all the setup. You can now parse the data from the string, and populate your model objects:","type":"text"}]}]}],"type":"orderedList"},{"code":["  let container1 = Container(\"Color: blue, size: medium, volume: 12.5 cm3\".find(.color, .size, .volume)!)","  let container2 = Container(\"Color: red, size: small, volume: 6.2 cm3\".find(.color, .size, .volume)!)","  let container3 = Container(\"Color: yellow, size: large, volume: 17.82 cm3\".find(.color, .size, .volume)!)"],"type":"codeListing","syntax":"swift"},{"anchor":"Using-SoulverCore-as-a-parser-inside-Swift-Regex-Builder","level":2,"type":"heading","text":"Using SoulverCore as a parser inside Swift Regex Builder"},{"inlineContent":[{"type":"text","text":"SoulverCore is able to be used to parse data inside the Swift regex builder DSL. This is often easier than figuring out how to match the format of your data with a regular expression."}],"type":"paragraph"},{"code":["if #available(macOS 13.0, iOS 16.0, *) {","    let input = \"Cost: 365.45, Date: March 12, 2022\"","    ","    let regex = Regex {","        \"Cost: \"","        Capture {","            DataPoint<NumberFromTokenParser>.number","        }","        \", Date: \"","        Capture {","            DataPoint<DateFromTokenParser>.date","        }","    }","    ","    let match = input.wholeMatch(of: regex).1 \/\/ 365.45","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Comparison-with-other-data-parsing-approaches","level":2,"type":"heading","text":"Comparison with other data parsing approaches"},{"inlineContent":[{"text":"Apple’s toolkit for string parsing includes Regex, NSScanner & NSDataDetector. Let’s compare and contrast each of these with SoulverCore.","type":"text"}],"type":"paragraph"},{"anchor":"Regular-Expressions","level":4,"type":"heading","text":"Regular Expressions"},{"inlineContent":[{"type":"reference","identifier":"https:\/\/en.wikipedia.org\/wiki\/Regular_expression","isActive":true},{"text":" will always be with us, but ask yourself, do you ","type":"text"},{"inlineContent":[{"text":"really","type":"text"}],"type":"emphasis"},{"text":" want to use them for data processing?","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"They’re non-trivial to understand at a glance, and constructing a correct regex to match data is, at the minimum, tedious (if not mentally quite ","type":"text"},{"inlineContent":[{"text":"challenging","type":"text"}],"type":"emphasis"},{"text":" sometimes).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Regex only “sees” sets of characters\/numbers\/whitespace so it forces you to think about the string format of the data you want to parse, and also often about how to skip past other strings leading up to it."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"So even with the "},{"type":"strong","inlineContent":[{"text":"significant","type":"text"}]},{"type":"text","text":" enhancements to regex in Swift 5.7 (type-safe tuple matches & the regex builder syntax), regex makes you think about data parsing at the "},{"type":"emphasis","inlineContent":[{"text":"wrong level of abstraction","type":"text"}]},{"type":"text","text":" (i.e. characters, rather than data types)."}],"type":"paragraph"},{"inlineContent":[{"text":"If Swift is to achieve its goal of becoming ","type":"text"},{"identifier":"https:\/\/github.com\/apple\/swift\/blob\/main\/docs\/StringManifesto.md","isActive":true,"type":"reference"},{"text":", it needs something more human friendly at the level of abstraction of data, not character sets.","type":"text"}],"type":"paragraph"},{"anchor":"NSScanner","level":4,"type":"heading","text":"NSScanner"},{"inlineContent":[{"text":"A scanner is an imperative (rather than declarative) approach to parsing data out of strings. You move a scanner through a string step-by-step, scanning out the components that you want.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"One benefit of NSScanner is that it’s able to ignore parts of strings you don’t care about. However scanner still only knows about numbers and strings - not higher level data types."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Here is a "},{"isActive":true,"type":"reference","identifier":"https:\/\/stackoverflow.com\/questions\/594797\/how-to-use-nsscanner"},{"type":"text","text":" that illustrates the use of NSScanner to scan the integer from the string “user logged (3 attempts)”."}],"type":"paragraph"},{"code":["NSString *logString = @\"user logged (3 attempts)\";","NSString *numberString;","NSScanner *scanner = [NSScanner scannerWithString:logString];","[scanner scanUpToCharactersFromSet:[NSCharacterSet decimalDigitCharacterSet] intoString:nil];","[scanner scanCharactersFromSet:[NSCharacterSet decimalDigitCharacterSet] intoString:&numberString];","NSLog(@\"Attempts: %i\", [numberString intValue]); \/\/ 3"],"type":"codeListing","syntax":"objc"},{"inlineContent":[{"type":"text","text":"Regex (in Swift 5.7+) is somewhat more concise"}],"type":"paragraph"},{"code":["","if #available(macOS 13.0, iOS 16.0, *) {","    let match = \"user logged (3 attempts)\".firstMatch(of: \/([+\\\\-]?[0-9]+)\/)","    let numberSubstring = match!.0","    let number = Int(numberSubstring)","}",""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"And now SoulverCore:"}],"type":"paragraph"},{"code":["let number = \"user logged (3 attempts)\".find(.number)"],"type":"codeListing","syntax":"swift"},{"anchor":"NSDataDetector","level":4,"type":"heading","text":"NSDataDetector"},{"inlineContent":[{"type":"text","text":"NSDataDetector is an NSRegularExpression subclass that is able to scan a string for dates, URLs, phone numbers, addresses, and flight details. It’s a great class, and supports many different formats. Additionally, it return propers data types from strings, like URL and Date (much like SoulverCore)."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Compare:"}],"type":"paragraph"},{"anchor":"NSDataDetector","level":5,"type":"heading","text":"NSDataDetector"},{"code":["let input = \"Learn more at https:\/\/fascinatingcaptain.com today.\"","let detector = try! NSDataDetector(types: NSTextCheckingResult.CheckingType.link.rawValue)","let url = detector.firstMatch(in: input, options: [], range: NSRange(location: 0, length: input.utf16.count))!.url!"],"type":"codeListing","syntax":"swift"},{"anchor":"SoulverCore","level":5,"type":"heading","text":"SoulverCore"},{"code":["let url = \"Learn more at https:\/\/fascinatingcaptain.com today\".find(.url)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"NSDataDetector’s downsides are that the API is not particularly “Swifty”, supported data types are limited, and it’s not part of the platform-independent implementation of Foundation (so you can’t use it on Linux, Windows, etc)"}],"type":"paragraph"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/soulvercore\/dataparsing"]}],"abstract":[{"text":"A declarative & type-safe approach to extracting various data types out of strings","type":"text"}],"seeAlsoSections":[{"anchor":"String-extensions-for-quick-data-parsing","identifiers":["doc:\/\/app.soulver.core\/documentation\/SoulverCore\/DateParsing"],"generated":true,"title":"String extensions for quick data parsing"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/app.soulver.core\/documentation\/SoulverCore\/DataParsing"},"metadata":{"role":"article","title":"Data from string parsing","modules":[{"name":"SoulverCore"}],"roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/app.soulver.core\/documentation\/SoulverCore"]]},"sections":[],"kind":"article","references":{"https://stackoverflow.com/questions/594797/how-to-use-nsscanner":{"titleInlineContent":[{"type":"text","text":"StackOverflow post"}],"title":"StackOverflow post","url":"https:\/\/stackoverflow.com\/questions\/594797\/how-to-use-nsscanner","type":"link","identifier":"https:\/\/stackoverflow.com\/questions\/594797\/how-to-use-nsscanner"},"https://github.com/apple/swift/blob/main/docs/StringManifesto.md":{"title":"the world’s greatest string & data processing language","url":"https:\/\/github.com\/apple\/swift\/blob\/main\/docs\/StringManifesto.md","titleInlineContent":[{"text":"the world’s greatest string & data processing language","type":"text"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift\/blob\/main\/docs\/StringManifesto.md"},"doc://app.soulver.core/documentation/SoulverCore/DateParsing":{"abstract":[{"text":"Add a natural language date scheduling feature to your Mac or iOS calendar or reminders app","type":"text"}],"title":"Natural language date parsing","url":"\/documentation\/soulvercore\/dateparsing","role":"article","kind":"article","identifier":"doc:\/\/app.soulver.core\/documentation\/SoulverCore\/DateParsing","type":"topic"},"doc://app.soulver.core/documentation/SoulverCore":{"title":"SoulverCore","type":"topic","kind":"symbol","identifier":"doc:\/\/app.soulver.core\/documentation\/SoulverCore","role":"collection","url":"\/documentation\/soulvercore","abstract":[{"type":"text","text":"A powerful natural language calculation engine"}]},"https://en.wikipedia.org/wiki/Regular_expression":{"titleInlineContent":[{"type":"text","text":"Regular expressions"}],"title":"Regular expressions","url":"https:\/\/en.wikipedia.org\/wiki\/Regular_expression","type":"link","identifier":"https:\/\/en.wikipedia.org\/wiki\/Regular_expression"}}}